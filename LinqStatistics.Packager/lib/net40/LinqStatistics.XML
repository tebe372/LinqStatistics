<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqStatistics</name>
    </assembly>
    <members>
        <member name="T:LinqStatistics.Bin">
            <summary>
            A discrete count of items which fall into a given range
            </summary>
        </member>
        <member name="T:LinqStatistics.ItemCount`1">
            <summary>
            Represents a Histogram bin
            </summary>
            <typeparam name="T">The type of the Bin value</typeparam>
        </member>
        <member name="M:LinqStatistics.ItemCount`1.#ctor(`0,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="v"></param>
            <param name="count"></param>
        </member>
        <member name="M:LinqStatistics.ItemCount`1.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj">The item to compare to.</param>
            <returns>True if obj is a Bin{T} and Value and Count are equal</returns>
        </member>
        <member name="M:LinqStatistics.ItemCount`1.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>Hash of Value and Count</returns>
        </member>
        <member name="M:LinqStatistics.ItemCount`1.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqStatistics.ItemCount`1.RepresentativeValue">
            <summary>
            The value represented by the bin
            </summary>
        </member>
        <member name="P:LinqStatistics.ItemCount`1.Count">
            <summary>
            The number of times Value appears in the source data
            </summary>
        </member>
        <member name="M:LinqStatistics.Bin.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="v">Representative value for the Bin</param>
            <param name="min">The minimum value of the Range</param>
            <param name="max">The maximum value of the range</param>
            <param name="count">The number of items in the Bin</param>
            <param name="maxInclusive">Should Max be included in the Range or excluded - default is excluded</param>
        </member>
        <member name="M:LinqStatistics.Bin.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqStatistics.Bin.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:LinqStatistics.Bin.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqStatistics.Bin.Range">
            <summary>
            The range
            </summary>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the Covariance of two sequences of nullable int values.
            </summary>
            <param name="source">The first sequence of nullable int values to calculate the Covariance of.</param>
            <param name="other">The second sequence of nullable int values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the Covariance of two sequences of int  values.
            </summary>
            <param name="source">The first sequence of int values to calculate the Covariance of.</param>
            <param name="other">The second sequence of int values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the Covariance of two sequences of nullable long values.
            </summary>
            <param name="source">The first sequence of nullable long values to calculate the Covariance of.</param>
            <param name="other">The second sequence of nullable long values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the Covariance of two sequences of long  values.
            </summary>
            <param name="source">The first sequence of long values to calculate the Covariance of.</param>
            <param name="other">The second sequence of long values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the Covariance of two sequences of nullable decimal values.
            </summary>
            <param name="source">The first sequence of nullable decimal values to calculate the Covariance of.</param>
            <param name="other">The second sequence of nullable decimal values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the Covariance of two sequences of decimal  values.
            </summary>
            <param name="source">The first sequence of decimal values to calculate the Covariance of.</param>
            <param name="other">The second sequence of decimal values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the Covariance of two sequences of nullable float values.
            </summary>
            <param name="source">The first sequence of nullable float values to calculate the Covariance of.</param>
            <param name="other">The second sequence of nullable float values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the Covariance of two sequences of float  values.
            </summary>
            <param name="source">The first sequence of float values to calculate the Covariance of.</param>
            <param name="other">The second sequence of float values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the Covariance of two sequences of nullable double values.
            </summary>
            <param name="source">The first sequence of nullable double values to calculate the Covariance of.</param>
            <param name="other">The second sequence of nullable double values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Covariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Covariance of two sequences of double  values.
            </summary>
            <param name="source">The first sequence of double values to calculate the Covariance of.</param>
            <param name="other">The second sequence of double values to calculate the Covariance of.</param>
            <returns>The Covariance of the two sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the Kurtosis of a sequence of nullable int values
            </summary>
            <param name="source">A sequence of nullable int values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the Kurtosis of a sequence of int values
            </summary>
            <param name="source">A sequence of int values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Computes the Kurtosis of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
                Computes the Kurtosis of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the Kurtosis of a sequence of nullable long values
            </summary>
            <param name="source">A sequence of nullable long values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the Kurtosis of a sequence of long values
            </summary>
            <param name="source">A sequence of long values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
                Computes the Kurtosis of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
                Computes the Kurtosis of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the Kurtosis of a sequence of nullable decimal values
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the Kurtosis of a sequence of decimal values
            </summary>
            <param name="source">A sequence of decimal values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
                Computes the Kurtosis of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
                Computes the Kurtosis of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the Kurtosis of a sequence of nullable float values
            </summary>
            <param name="source">A sequence of nullable float values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the Kurtosis of a sequence of float values
            </summary>
            <param name="source">A sequence of float values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
                Computes the Kurtosis of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
                Computes the Kurtosis of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the Kurtosis of a sequence of nullable double values
            </summary>
            <param name="source">A sequence of nullable double values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Kurtosis of a sequence of double values
            </summary>
            <param name="source">A sequence of double values to calculate the Kurtosis of.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Computes the Kurtosis of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Kurtosis``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
                Computes the Kurtosis of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Kurtosis of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Nullable{System.Int32},System.Nullable{System.Int32}}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{int?, int?} values.
            </summary>
            <param name="source">A sequence of Tuple{int?, int?} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{int, int} values.
            </summary>
            <param name="source">A sequence of Tuple{int, int} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Nullable{System.Int32},System.Nullable{System.Int32}}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{int?, int?} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Int32,System.Int32}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{int, int} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Nullable{System.Int64},System.Nullable{System.Int64}}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{long?, long?} values.
            </summary>
            <param name="source">A sequence of Tuple{long?, long?} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Int64,System.Int64}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{long, long} values.
            </summary>
            <param name="source">A sequence of Tuple{long, long} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Nullable{System.Int64},System.Nullable{System.Int64}}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{long?, long?} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Int64,System.Int64}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{long, long} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Nullable{System.Single},System.Nullable{System.Single}}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{float?, float?} values.
            </summary>
            <param name="source">A sequence of Tuple{float?, float?} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{float, float} values.
            </summary>
            <param name="source">A sequence of Tuple{float, float} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Nullable{System.Single},System.Nullable{System.Single}}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{float?, float?} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Single,System.Single}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{float, float} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Nullable{System.Double},System.Nullable{System.Double}}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{double?, double?} values.
            </summary>
            <param name="source">A sequence of Tuple{double?, double?} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{double, double} values.
            </summary>
            <param name="source">A sequence of Tuple{double, double} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Nullable{System.Double},System.Nullable{System.Double}}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{double?, double?} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Double,System.Double}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{double, double} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Nullable{System.Decimal},System.Nullable{System.Decimal}}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{decimal?, decimal?} values.
            </summary>
            <param name="source">A sequence of Tuple{decimal?, decimal?} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares(System.Collections.Generic.IEnumerable{System.Tuple{System.Decimal,System.Decimal}})">
            <summary>
            Computes the LeastSquares of a sequence of Tuple{decimal, decimal} values.
            </summary>
            <param name="source">A sequence of Tuple{decimal, decimal} values to calculate the LeastSquares of.</param>
            <returns> The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Nullable{System.Decimal},System.Nullable{System.Decimal}}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{decimal?, decimal?} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.LeastSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{System.Decimal,System.Decimal}})">
            <summary>
                Computes the LeastSquares of a sequence of Tuple{decimal, decimal} values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the LeastSquares of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The LeastSquares of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the Median of a sequence of mullable int values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of nullable int values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the Median of a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
                Computes the Median of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Computes the Median of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the Median of a sequence of mullable long values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of nullable long values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the Median of a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
                Computes the Median of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
                Computes the Median of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the Median of a sequence of mullable decimal values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the Median of a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
                Computes the Median of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
                Computes the Median of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the Median of a sequence of mullable float values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of nullable float values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the Median of a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
                Computes the Median of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
                Computes the Median of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the Median of a sequence of mullable double values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of nullable double values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Median of a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the Median of.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
                Computes the Median of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Computes the Median of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Median of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Median of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the Pearson of two sequences of nullable int values.
            </summary>
            <param name="source">The first sequence of nullable int values to calculate the Pearson of.</param>
            <param name="other">The second sequence of nullable int values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the Pearson of two sequences of int values.
            </summary>
            <param name="source">The first sequence of int values to calculate the Pearson of.</param>
            <param name="other">The second sequence of int values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Computes the Pearson of the Item values of a sequence of Tuple{int, int} values.
            </summary>
            <param name="source">The type of the Tuple's Items.</param>
            <returns>The Pearson value.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
                Computes the Pearson of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of int values to calculate the Pearson of.</param>
            <param name="other">The second sequence of int values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Computes the Pearson of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of int values to calculate the Pearson of.</param>
            <param name="other">The second sequence of int values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the Pearson of two sequences of nullable long values.
            </summary>
            <param name="source">The first sequence of nullable long values to calculate the Pearson of.</param>
            <param name="other">The second sequence of nullable long values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the Pearson of two sequences of long values.
            </summary>
            <param name="source">The first sequence of long values to calculate the Pearson of.</param>
            <param name="other">The second sequence of long values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Tuple{System.Int64,System.Int64}})">
            <summary>
            Computes the Pearson of the Item values of a sequence of Tuple{long, long} values.
            </summary>
            <param name="source">The type of the Tuple's Items.</param>
            <returns>The Pearson value.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
                Computes the Pearson of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of long values to calculate the Pearson of.</param>
            <param name="other">The second sequence of long values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
                Computes the Pearson of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of long values to calculate the Pearson of.</param>
            <param name="other">The second sequence of long values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the Pearson of two sequences of nullable decimal values.
            </summary>
            <param name="source">The first sequence of nullable decimal values to calculate the Pearson of.</param>
            <param name="other">The second sequence of nullable decimal values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the Pearson of two sequences of decimal values.
            </summary>
            <param name="source">The first sequence of decimal values to calculate the Pearson of.</param>
            <param name="other">The second sequence of decimal values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Tuple{System.Decimal,System.Decimal}})">
            <summary>
            Computes the Pearson of the Item values of a sequence of Tuple{decimal, decimal} values.
            </summary>
            <param name="source">The type of the Tuple's Items.</param>
            <returns>The Pearson value.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
                Computes the Pearson of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of decimal values to calculate the Pearson of.</param>
            <param name="other">The second sequence of decimal values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
                Computes the Pearson of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of decimal values to calculate the Pearson of.</param>
            <param name="other">The second sequence of decimal values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the Pearson of two sequences of nullable float values.
            </summary>
            <param name="source">The first sequence of nullable float values to calculate the Pearson of.</param>
            <param name="other">The second sequence of nullable float values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the Pearson of two sequences of float values.
            </summary>
            <param name="source">The first sequence of float values to calculate the Pearson of.</param>
            <param name="other">The second sequence of float values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Computes the Pearson of the Item values of a sequence of Tuple{float, float} values.
            </summary>
            <param name="source">The type of the Tuple's Items.</param>
            <returns>The Pearson value.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
                Computes the Pearson of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of float values to calculate the Pearson of.</param>
            <param name="other">The second sequence of float values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
                Computes the Pearson of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of float values to calculate the Pearson of.</param>
            <param name="other">The second sequence of float values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the Pearson of two sequences of nullable double values.
            </summary>
            <param name="source">The first sequence of nullable double values to calculate the Pearson of.</param>
            <param name="other">The second sequence of nullable double values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Pearson of two sequences of double values.
            </summary>
            <param name="source">The first sequence of double values to calculate the Pearson of.</param>
            <param name="other">The second sequence of double values to calculate the Pearson of.</param>
            <returns>The Pearson value of two sequences.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson(System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}})">
            <summary>
            Computes the Pearson of the Item values of a sequence of Tuple{double, double} values.
            </summary>
            <param name="source">The type of the Tuple's Items.</param>
            <returns>The Pearson value.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
                Computes the Pearson of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of double values to calculate the Pearson of.</param>
            <param name="other">The second sequence of double values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Pearson``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Computes the Pearson of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The first sequence of double values to calculate the Pearson of.</param>
            <param name="other">The second sequence of double values to calculate the Pearson of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Pearson of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the Range of a sequence of nullable int values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the Range of a sequence of int values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
                Computes the Range of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
                Computes the Range of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the Range of a sequence of nullable long values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the Range of a sequence of long values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
                Computes the Range of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
                Computes the Range of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the Range of a sequence of nullable float values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the Range of a sequence of float values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
                Computes the Range of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
                Computes the Range of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the Range of a sequence of nullable double values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Range of a sequence of double values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
                Computes the Range of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Computes the Range of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the Range of a sequence of nullable decimal values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the Range of a sequence of decimal values.
            </summary>
            <param name="source">The sequence of elements.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
                Computes the Range of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
                Computes the Range of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Range.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
                The RootMeanSquare of the sequence of nullable int values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of int values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                The RootMeanSquare of the sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the RootMeanSquare of a sequence of nullable int values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the RootMeanSquare of a sequence of int values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
                The RootMeanSquare of the sequence of nullable long values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of long values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                The RootMeanSquare of the sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the RootMeanSquare of a sequence of nullable long values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the RootMeanSquare of a sequence of long values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
                The RootMeanSquare of the sequence of nullable decimal values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of decimal values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
                The RootMeanSquare of the sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the RootMeanSquare of a sequence of nullable decimal values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the RootMeanSquare of a sequence of decimal values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
                The RootMeanSquare of the sequence of nullable float values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of float values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                The RootMeanSquare of the sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the RootMeanSquare of a sequence of nullable float values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the RootMeanSquare of a sequence of float values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
                The RootMeanSquare of the sequence of nullable double values, or null if the source sequence is
                empty or contains only values that are null.
            </summary>
            <param name="source">A sequence of double values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                The RootMeanSquare of the sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the RootMeanSquare of.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the RootMeanSquare of a sequence of nullable double values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.RootMeanSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the RootMeanSquare of a sequence of double values that are obtained
            by invoking a transform function on each element of the input sequence.        
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the RootMeanSquare of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The RootMeanSquare.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable int values.
            </summary>
            <param name="source">A sequence of nullable int values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the StandardDeviation of a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the StandardDeviation of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable long values.
            </summary>
            <param name="source">A sequence of nullable long values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the StandardDeviation of a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the StandardDeviation of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable decimal values.
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the StandardDeviation of a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the StandardDeviation of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the StandardDeviation of a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the StandardDeviation of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the StandardDeviation of a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the StandardDeviation of.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the StandardDeviation of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the StandardDeviation of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable int values.
            </summary>
            <param name="source">A sequence of nullable int values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the population StandardDeviation of a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the population StandardDeviation of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable long values.
            </summary>
            <param name="source">A sequence of nullable long values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the population StandardDeviation of a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the population StandardDeviation of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable decimal values.
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the population StandardDeviation of a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the population StandardDeviation of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the population StandardDeviation of a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the population StandardDeviation of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the population StandardDeviation of a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the population StandardDeviation of.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the population StandardDeviation of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.StandardDeviationP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the population StandardDeviation of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The population StandardDeviation of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the Variance of a sequence of nullable int values.
            </summary>
            <param name="source">A sequence of nullable int values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the Variance of a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the Variance of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the Variance of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the Variance of a sequence of nullable long values.
            </summary>
            <param name="source">A sequence of nullable long values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the Variance of a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the Variance of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the Variance of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the Variance of a sequence of nullable decimal values.
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the Variance of a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the Variance of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the Variance of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the Variance of a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the Variance of a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the Variance of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the Variance of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the Variance of a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Variance of a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the Variance of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the Variance of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the population Variance of a sequence of nullable int values.
            </summary>
            <param name="source">A sequence of nullable int values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the population Variance of a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the population Variance of a sequence of nullable int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the population Variance of a sequence of int values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the population Variance of a sequence of nullable long values.
            </summary>
            <param name="source">A sequence of nullable long values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the population Variance of a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the population Variance of a sequence of nullable long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the population Variance of a sequence of long values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the population Variance of a sequence of nullable decimal values.
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the population Variance of a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the population Variance of a sequence of nullable decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the population Variance of a sequence of decimal values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the population Variance of a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the population Variance of a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the population Variance of a sequence of nullable float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the population Variance of a sequence of float values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the population Variance of a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the population Variance of a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the population Variance of.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the population Variance of a sequence of nullable double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.VarianceP``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the population Variance of a sequence of double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence of elements.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>       
                The Variance of the sequence of values.
            </returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.BinCountSturges``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            http://en.wikipedia.org/wiki/Histogram#Number_of_bins_and_width
            </summary>
            <typeparam name="T">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements.</param>
            <returns>The number of bins to use to create a histogram.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.BinCountSquareRoot``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            http://en.wikipedia.org/wiki/Histogram#Number_of_bins_and_width
            </summary>
            <typeparam name="T">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements.</param>
            <returns>The number of bins to use to create a histogram.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.BinCountRice``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            http://en.wikipedia.org/wiki/Histogram#Number_of_bins_and_width
            </summary>
            <typeparam name="T">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements.</param>
            <returns>The number of bins to use to create a histogram.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.CountEach``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Counts each unique element in a sequence
            </summary>
            <typeparam name="T">The type of the sequence</typeparam>
            <param name="source">The sequence to count</param>
            <param name="comparer">Comparer used to determine equality between elements</param>
            <returns>The count of each unique element</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.CountEach``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Counts each unique element in a sequence
            </summary>
            <typeparam name="T">The type of the sequence</typeparam>
            <param name="source">The sequence to count</param>
            <returns>The count of each unique element</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.CountEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Counts each unique element in a sequence
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the element selected</typeparam>
            <param name="source">A sequence of values to calculate the unique count of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The count of each unique element</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.AllValues``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Returns all non-null items in a sequence
            </summary>
            <typeparam name="T">The type of the sequence</typeparam>
            <param name="source">The Sequence</param>
            <returns>All non-null elements in the sequence</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.AllValues``1(System.Collections.Generic.IEnumerable{System.Tuple{System.Nullable{``0},System.Nullable{``0}}})">
            <summary>
            Returns all elements in a sequence of Tuples where the Tuple's are not null
            </summary>
            <typeparam name="T">The type of the Tuple's Items</typeparam>
            <param name="source">The sequence</param>
            <returns>All Tuples in the sequence with non-null items</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Modes``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Calculates the modes of a sequences of elements
            </summary>
            <typeparam name="T">The type of the elemensts in the source sequence</typeparam>
            <param name="source">A sequence of values to calculate the Modes of.</param>
            <returns>The modes of a sequence of values</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Modes``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculates the modes of a sequences of nullable elements
            </summary>
            <typeparam name="T">The type of the elemensts in the source sequence</typeparam>
            <param name="source">A sequence of values to calculate the Modes of.</param>
            <returns>The modes of a sequence of values</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Mode``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Calculates the mode of a sequences of elements
            </summary>
            <typeparam name="T">The type of the elemensts in the source sequence</typeparam>
            <param name="source">A sequence of values to calculate the Mode of.</param>
            <returns>The mode of a sequence of values</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Mode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculates the Mode of a sequences of elements
            </summary>
            <typeparam name="T">The type of the elemensts in the source sequence</typeparam>
            <param name="source">A sequence of values to calculate the Mode of.</param>
            <returns>The Mode of a sequence of values</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Mode``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Computes the Mode of a sequence of values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TMode">The type of the Mode</typeparam>
            <param name="source">A sequence of values to calculate the Mode of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Mode of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Mode``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
                Computes the Mode of a sequence of values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TMode">The type of the Mode</typeparam>
            <param name="source">A sequence of values to calculate the Mode of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The Mode of the sequence of values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of int values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable int values.
            </summary>
            <param name="source">A sequence of nullable int values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable int values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of int values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of int values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable int values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable int values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of long values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable long values.
            </summary>
            <param name="source">A sequence of nullable long values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable long values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of long values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of long values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable long values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable long values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Single},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of float values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable float values.
            </summary>
            <param name="source">A sequence of nullable float values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable float values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of float values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of float values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable float values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable float values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Double},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of double values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable double values.
            </summary>
            <param name="source">A sequence of nullable double values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable double values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of double values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable double values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of decimal values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32,LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable decimal values.
            </summary>
            <param name="source">A sequence of nullable decimal values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable decimal values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of decimal values.</returns>
        </member>
        <member name="M:LinqStatistics.EnumerableStats.Histogram``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}},LinqStatistics.BinningMode)">
            <summary>
            Computes the Histogram of a sequence of nullable decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to calculate the Histogram of.</param>
            <param name="binCount">The number of bins into which to segregate the data.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="mode">The method used to determine the range of each bin</param>
            <returns>The Histogram of the sequence of nullable decimal values.</returns>
        </member>
        <member name="T:LinqStatistics.BinningMode">
            <summary>
            Controls how the range of the bins are determined
            </summary>
        </member>
        <member name="F:LinqStatistics.BinningMode.Unbounded">
            <summary>
            The minimum will be equal to the sequence min and the maximum equal to infinity
            </summary>
        </member>
        <member name="F:LinqStatistics.BinningMode.MaxValueInclusive">
            <summary>
            The minimum will be the sequnce min and the maximxum equal to sequence max
            The last bin will max inclusive instead of exclusive
            </summary>
        </member>
        <member name="F:LinqStatistics.BinningMode.ExpandRange">
            <summary>
            The total range will be expanded such that the min is
            less then the sequence min and max is greater then the sequence max
            </summary>
        </member>
        <member name="T:LinqStatistics.LeastSquares">
            <summary>
            Represent the result of a LeastSquares calculation of the form y = mX + b
            </summary>
        </member>
        <member name="M:LinqStatistics.LeastSquares.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m">The slope</param>
            <param name="b">the intercept</param>
        </member>
        <member name="M:LinqStatistics.LeastSquares.Solve(System.Double)">
            <summary>
            Uses the calculated coefficients to solve Y for inputted X
            </summary>
            <param name="x">X value to solve for</param>
            <returns>Y value (y = Mx + B)</returns>
        </member>
        <member name="M:LinqStatistics.LeastSquares.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>True if obj is a LeastSquares and has equal m and b values</returns>
        </member>
        <member name="M:LinqStatistics.LeastSquares.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>Hascode of the instance</returns>
        </member>
        <member name="M:LinqStatistics.LeastSquares.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqStatistics.LeastSquares.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:LinqStatistics.LeastSquares.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:LinqStatistics.LeastSquares.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:LinqStatistics.LeastSquares.M">
            <summary>
            M Coefficient for y = Mx + B
            </summary>
        </member>
        <member name="P:LinqStatistics.LeastSquares.B">
            <summary>
            B Coefficient for y = Mx + B
            </summary>
        </member>
        <member name="T:LinqStatistics.Range">
            <summary>
            An ordered pair of values, representing a segment.
            </summary>
        </member>
        <member name="M:LinqStatistics.Range.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqStatistics.Range"/> struct.
            </summary>
            <param name="min">The minimal value of segment.</param>
            <param name="max">The maximal value of segment.</param>
            <param name="maxInclusive">When true Contains will include the max value.</param>
        </member>
        <member name="M:LinqStatistics.Range.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:LinqStatistics.Range.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:LinqStatistics.Range.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:LinqStatistics.Range.Equals(LinqStatistics.Range)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:LinqStatistics.Range.MaxInclusive">
            <summary>
            Determines whether max should be included in the range or excluded
            </summary>
        </member>
        <member name="P:LinqStatistics.Range.Min">
            <summary>
            Gets the minimal value of segment.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:LinqStatistics.Range.Max">
            <summary>
            Gets the maximal value of segment.
            </summary>
            <value>The max.</value>
        </member>
        <member name="P:LinqStatistics.Range.Width">
            <summary>
            The width of the range
            </summary>
        </member>
    </members>
</doc>
