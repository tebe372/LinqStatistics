<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics
{
    public static partial class EnumerableStats
    {
    <# List<Tuple<string, string>> types = new List<Tuple<string, string>>()
    {
        new Tuple<string, string>("int", "double"),
        new Tuple<string, string>("long", "double"),
        new Tuple<string, string>("decimal", "decimal"),
        new Tuple<string, string>("float", "float"),
        new Tuple<string, string>("double", "double")
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the Kurtosis of a sequence of nullable <#= type.Item1 #> values
        /// </summary>
        /// <param name="source">A sequence of nullable <#= type.Item1 #> values to calculate the Kurtosis of.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #>? Kurtosis(this IEnumerable<<#= type.Item1 #>?> source)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            IEnumerable<<#= type.Item1 #>> values = source.AllValues();
            if (values.Any())
                return values.Kurtosis();

            return null;
        }

        /// <summary>
        /// Computes the Kurtosis of a sequence of <#= type.Item1 #> values
        /// </summary>
        /// <param name="source">A sequence of <#= type.Item1 #> values to calculate the Kurtosis of.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #> Kurtosis(this IEnumerable<<#= type.Item1 #>> source)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            if (!source.Any())
                throw new InvalidOperationException("source sequence contains no elements");

            int n = 0;
            <#= type.Item2 #> mean = 0;
            <#= type.Item2 #> M2 = 0;
            <#= type.Item2 #> M3 = 0;
            <#= type.Item2 #> M4 = 0;

            foreach (var x in source)
            {
                int n1 = n;
                n += 1;
                <#= type.Item2 #> delta = x - mean;
                <#= type.Item2 #> delta_n = delta / n;
                <#= type.Item2 #> delta_n2 = delta_n * delta_n;
                <#= type.Item2 #> term1 = delta * delta_n * n1;
                mean = mean + delta_n;
                M4 += term1 * delta_n2 * (n * n - 3 * n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3;
                M3 += term1 * delta_n * (n - 2) - 3 * delta_n * M2;
                M2 += term1;
            }
            return (n * M4) / (M2 * M2) - 3;
        }

        /// <summary>
        ///     Computes the Kurtosis of a sequence of <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #> Kurtosis<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>> selector)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            return source.Select(selector).Kurtosis();
        }

        /// <summary>
        ///     Computes the Kurtosis of a sequence of nullable <#= type.Item1 #> values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values that are used to calculate an Kurtosis</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The Kurtosis of the sequence of values.</returns>
        public static <#= type.Item2 #>? Kurtosis<TSource>(this IEnumerable<TSource> source, Func<TSource, <#= type.Item1 #>?> selector)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            return source.Select(selector).Kurtosis();
        }
 <# } #>
    }
}