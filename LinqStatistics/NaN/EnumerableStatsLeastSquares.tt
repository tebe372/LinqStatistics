<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
// In order to make changes make sure to edit the t4 template file (*.tt)
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqStatistics.NaN
{
    public static partial class EnumerableStatsNaN
    {
    <# var types = new List<string>()
    {
        "int", "long", "float", "double", "decimal"
    };

    foreach(var type in types)
    {#>	
        /// <summary>
        /// Computes the LeastSquares of a sequence of Tuple{<#= type #>?, <#= type #>?} values.
        /// </summary>
        /// <param name="source">A sequence of Tuple{<#= type #>?, <#= type #>?} values to calculate the LeastSquares of.</param>
        /// <returns> The LeastSquares of the sequence of values, or null if the source sequence is
        ///     empty or contains only values that are null.</returns>
        public static LeastSquares? LeastSquaresNaN(this IEnumerable<Tuple<<#= type #>?, <#= type #>?>> source)
        {
            var values = source.AllValues();
            if (values.Any())
                return values.LeastSquaresNaN();

            return null;
        }

        /// <summary>
        /// Computes the LeastSquares of a sequence of Tuple{<#= type #>, <#= type #>} values.
        /// </summary>
        /// <param name="source">A sequence of Tuple{<#= type #>, <#= type #>} values to calculate the LeastSquares of.</param>
        /// <returns> The LeastSquares of the sequence of values.</returns>
        public static LeastSquares LeastSquaresNaN(this IEnumerable<Tuple<<#= type #>, <#= type #>>> source)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            long n = 0;
            double sumX = 0;
            double sumY = 0;
            double sumXX = 0;
            double sumXY = 0;

            checked
            { 
                foreach (var tuple in source)
                {
                    n++;
                    sumX += (double)tuple.Item1;
                    sumY += (double)tuple.Item2;
                    sumXX += (double)(tuple.Item1 * tuple.Item1);
                    sumXY += (double)(tuple.Item1 * tuple.Item2);
                }
            }

            if (n < 2)
                return new LeastSquares(double.NaN, double.NaN);
            
            double denominator = (n * sumXX - sumX * sumX);
            double b = (-sumX * sumXY + sumXX * sumY) / denominator;
            double m = (-sumX * sumY + n * sumXY) / denominator;

            return new LeastSquares(m, b);
        }

        /// <summary>
        ///     Computes the LeastSquares of a sequence of Tuple{<#= type #>?, <#= type #>?} values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values to calculate the LeastSquares of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The LeastSquares of the sequence of values.</returns>
        public static LeastSquares? LeastSquaresNaN<TSource>(this IEnumerable<TSource> source, Func<TSource, Tuple<<#= type #>?, <#= type #>?>> selector)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            if (selector == null)
                throw new ArgumentNullException("selector");

            return source.Select(selector).LeastSquaresNaN();
        }

        /// <summary>
        ///     Computes the LeastSquares of a sequence of Tuple{<#= type #>, <#= type #>} values that are obtained
        ///     by invoking a transform function on each element of the input sequence.
        /// </summary>
        /// <typeparam name="TSource">The type of the elements of source.</typeparam>
        /// <param name="source">A sequence of values to calculate the LeastSquares of.</param>
        /// <param name="selector">A transform function to apply to each element.</param>
        /// <returns>The LeastSquares of the sequence of values.</returns>
        public static LeastSquares LeastSquaresNaN<TSource>(this IEnumerable<TSource> source, Func<TSource, Tuple<<#= type #>, <#= type #>>> selector)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            if (selector == null)
                throw new ArgumentNullException("selector");

            return source.Select(selector).LeastSquaresNaN();
        }
 <# } #>
    }
}